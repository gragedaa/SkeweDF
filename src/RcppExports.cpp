// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// boost_hypergeometric_2F1
double boost_hypergeometric_2F1(double a1, double a2, double b, double theta);
RcppExport SEXP _SkeweDF_boost_hypergeometric_2F1(SEXP a1SEXP, SEXP a2SEXP, SEXP bSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(boost_hypergeometric_2F1(a1, a2, b, theta));
    return rcpp_result_gen;
END_RCPP
}
// Kolmogorov_Waring_P0
double Kolmogorov_Waring_P0(double a1, double a2, double b, double theta);
RcppExport SEXP _SkeweDF_Kolmogorov_Waring_P0(SEXP a1SEXP, SEXP a2SEXP, SEXP bSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Kolmogorov_Waring_P0(a1, a2, b, theta));
    return rcpp_result_gen;
END_RCPP
}
// Kolmogorov_Waring_Moment
double Kolmogorov_Waring_Moment(double a1, double b1, double theta, double r);
RcppExport SEXP _SkeweDF_Kolmogorov_Waring_Moment(SEXP a1SEXP, SEXP b1SEXP, SEXP thetaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(Kolmogorov_Waring_Moment(a1, b1, theta, r));
    return rcpp_result_gen;
END_RCPP
}
// Kolmogorov_Waring
std::vector<double> Kolmogorov_Waring(int n, Rcpp::NumericVector a, Rcpp::NumericVector b, double theta);
RcppExport SEXP _SkeweDF_Kolmogorov_Waring(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Kolmogorov_Waring(n, a, b, theta));
    return rcpp_result_gen;
END_RCPP
}
// Kolmogorov_Waring_no_trunc
std::vector<double> Kolmogorov_Waring_no_trunc(int n, Rcpp::NumericVector a, Rcpp::NumericVector b, double theta);
RcppExport SEXP _SkeweDF_Kolmogorov_Waring_no_trunc(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(Kolmogorov_Waring_no_trunc(n, a, b, theta));
    return rcpp_result_gen;
END_RCPP
}
// RGHD_P0_calc_function
double RGHD_P0_calc_function(int k, int m, Rcpp::NumericVector r, Rcpp::NumericVector q);
RcppExport SEXP _SkeweDF_RGHD_P0_calc_function(SEXP kSEXP, SEXP mSEXP, SEXP rSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(RGHD_P0_calc_function(k, m, r, q));
    return rcpp_result_gen;
END_RCPP
}
// RGHD_P0_calc_pi
double RGHD_P0_calc_pi(int y, int m, Rcpp::NumericVector r, Rcpp::NumericVector q);
RcppExport SEXP _SkeweDF_RGHD_P0_calc_pi(SEXP ySEXP, SEXP mSEXP, SEXP rSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(RGHD_P0_calc_pi(y, m, r, q));
    return rcpp_result_gen;
END_RCPP
}
// RGHD_P0_calc
double RGHD_P0_calc(int sigma_upper, int m, Rcpp::NumericVector r, Rcpp::NumericVector q);
RcppExport SEXP _SkeweDF_RGHD_P0_calc(SEXP sigma_upperSEXP, SEXP mSEXP, SEXP rSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type sigma_upper(sigma_upperSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(RGHD_P0_calc(sigma_upper, m, r, q));
    return rcpp_result_gen;
END_RCPP
}
// RGHD_P0
double RGHD_P0(int m, Rcpp::NumericVector r, Rcpp::NumericVector q);
RcppExport SEXP _SkeweDF_RGHD_P0(SEXP mSEXP, SEXP rSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(RGHD_P0(m, r, q));
    return rcpp_result_gen;
END_RCPP
}
// RGHD
std::vector<double> RGHD(int J, int m, Rcpp::NumericVector r, Rcpp::NumericVector q, int P0_iter, bool P0_included);
RcppExport SEXP _SkeweDF_RGHD(SEXP JSEXP, SEXP mSEXP, SEXP rSEXP, SEXP qSEXP, SEXP P0_iterSEXP, SEXP P0_includedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type P0_iter(P0_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type P0_included(P0_includedSEXP);
    rcpp_result_gen = Rcpp::wrap(RGHD(J, m, r, q, P0_iter, P0_included));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SkeweDF_boost_hypergeometric_2F1", (DL_FUNC) &_SkeweDF_boost_hypergeometric_2F1, 4},
    {"_SkeweDF_Kolmogorov_Waring_P0", (DL_FUNC) &_SkeweDF_Kolmogorov_Waring_P0, 4},
    {"_SkeweDF_Kolmogorov_Waring_Moment", (DL_FUNC) &_SkeweDF_Kolmogorov_Waring_Moment, 4},
    {"_SkeweDF_Kolmogorov_Waring", (DL_FUNC) &_SkeweDF_Kolmogorov_Waring, 4},
    {"_SkeweDF_Kolmogorov_Waring_no_trunc", (DL_FUNC) &_SkeweDF_Kolmogorov_Waring_no_trunc, 4},
    {"_SkeweDF_RGHD_P0_calc_function", (DL_FUNC) &_SkeweDF_RGHD_P0_calc_function, 4},
    {"_SkeweDF_RGHD_P0_calc_pi", (DL_FUNC) &_SkeweDF_RGHD_P0_calc_pi, 4},
    {"_SkeweDF_RGHD_P0_calc", (DL_FUNC) &_SkeweDF_RGHD_P0_calc, 4},
    {"_SkeweDF_RGHD_P0", (DL_FUNC) &_SkeweDF_RGHD_P0, 3},
    {"_SkeweDF_RGHD", (DL_FUNC) &_SkeweDF_RGHD, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_SkeweDF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
